/mm { 25.4 div 72 mul } def

%%%
% Grid size parameters
%%%

/grid_size 5 mm def
/little_dot_size 0.1 mm grid_size div def
/big_dot_size 0.175 mm grid_size div def


% Useful operators.
/dup2 {1 index 1 index} def
/rdef {exch def} def

% Useful maths.
/rsub {exch sub} def
/negate {0 rsub} def
/fraction {dup truncate sub} def
/remainder {exch 1 index div fraction mul} def
/half {2 div} def
/is_divisor? {mod 0 eq} def

% Derive stuff from parameters
/heavy_count 8 def
/heavy_size heavy_count grid_size mul def

% Query the page size
currentpagedevice /PageSize get dup
0 get /width rdef
1 get /height rdef

% Determine if an x y dot index should be drawn heavily - [x y] : [isbig]
/is_big_dot? 
{
    dup2
    8 is_divisor? exch 8 is_divisor? or
    3 1 roll
    4 is_divisor? exch 4 is_divisor? and
    or
} def

% Determine dotsize - [x y] : [dotsize]
/dot_size {is_big_dot? {big_dot_size} {little_dot_size} ifelse} def

% Draw dot - [x y dotsize] : []
/dot {newpath 0 360 arc fill} def

% Draw in black.
0 setgray

/width_count width grid_size div truncate def
/height_count height grid_size div truncate def

% Draw the grid - [] : []
/draw_page 
{
    % Translate origin to centre the heavy grid.
    width heavy_size remainder half
    height heavy_size remainder half
    translate

    % Scale to grid size.
    grid_size grid_size scale

    heavy_count negate 1 width_count
    {
        heavy_count negate 1 height_count
        {
            % Duplicate the x under y.
            % [x y] : [x x y]
            1 index exch

            % Determine the dot size here.
            % [x y] : [x y dotsize]
            dup2 dot_size 

            % Render the dot.
            % [x y dotsize] : []
            dot
        } for
        pop
    } for
}
def

draw_page showpage
draw_page showpage
